// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc295.GrizzlynatorBase.commands;

import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc295.GrizzlynatorBase.Robot;
import org.usfirst.frc295.GrizzlynatorBase.Drive.DriveSignal;

/**
 *
 */
public class CmdDriveAutoStraight extends Command 
{
    private double _dDistanceTarget;
    private double _dMove;
    private double _dRotation;
 
    private double _dDistanceStart;

    
    public CmdDriveAutoStraight(double dDistance, double dMove, double dRotation) 
    {
        requires(Robot.sysDriveTrain);
        _dDistanceTarget = dDistance;
        _dMove = dMove;
        _dRotation = dRotation;
    }

    // Called just before this Command runs the first time
    protected void initialize() 
    {
    	_dDistanceStart = Robot.sysDriveTrain.getDistance();
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() 
    {
        //Robot.sysDriveTrain.drive(_dMove, _dRotation);
    	/* FIXME */ Robot.sysDriveTrain.setOpenLoop(new DriveSignal(0, 0));
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() 
    {
        return ((Robot.sysDriveTrain.getDistance()- _dDistanceStart) >= _dDistanceTarget);
    }

    // Called once after isFinished returns true
    protected void end() 
    {
    	Robot.sysDriveTrain.setOpenLoop(new DriveSignal(0, 0));;
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() 
    {
    }
}
